/*
Workflow APIs

This APIs for iwf SDKs to operate workflows

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iwfidl

import (
	"encoding/json"
	"fmt"
)

// WorkflowConditionalCloseType the model 'WorkflowConditionalCloseType'
type WorkflowConditionalCloseType string

// List of WorkflowConditionalCloseType
const (
	FORCE_COMPLETE_ON_INTERNAL_CHANNEL_EMPTY WorkflowConditionalCloseType = "FORCE_COMPLETE_ON_INTERNAL_CHANNEL_EMPTY"
	FORCE_COMPLETE_ON_SIGNAL_CHANNEL_EMPTY   WorkflowConditionalCloseType = "FORCE_COMPLETE_ON_SIGNAL_CHANNEL_EMPTY"
	GRACEFUL_COMPLETE_ON_ALL_CHANNELS_EMPTY  WorkflowConditionalCloseType = "GRACEFUL_COMPLETE_ON_ALL_CHANNELS_EMPTY"
)

// All allowed values of WorkflowConditionalCloseType enum
var AllowedWorkflowConditionalCloseTypeEnumValues = []WorkflowConditionalCloseType{
	"FORCE_COMPLETE_ON_INTERNAL_CHANNEL_EMPTY",
	"FORCE_COMPLETE_ON_SIGNAL_CHANNEL_EMPTY",
	"GRACEFUL_COMPLETE_ON_ALL_CHANNELS_EMPTY",
}

func (v *WorkflowConditionalCloseType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WorkflowConditionalCloseType(value)
	for _, existing := range AllowedWorkflowConditionalCloseTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WorkflowConditionalCloseType", value)
}

// NewWorkflowConditionalCloseTypeFromValue returns a pointer to a valid WorkflowConditionalCloseType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkflowConditionalCloseTypeFromValue(v string) (*WorkflowConditionalCloseType, error) {
	ev := WorkflowConditionalCloseType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WorkflowConditionalCloseType: valid values are %v", v, AllowedWorkflowConditionalCloseTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WorkflowConditionalCloseType) IsValid() bool {
	for _, existing := range AllowedWorkflowConditionalCloseTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WorkflowConditionalCloseType value
func (v WorkflowConditionalCloseType) Ptr() *WorkflowConditionalCloseType {
	return &v
}

type NullableWorkflowConditionalCloseType struct {
	value *WorkflowConditionalCloseType
	isSet bool
}

func (v NullableWorkflowConditionalCloseType) Get() *WorkflowConditionalCloseType {
	return v.value
}

func (v *NullableWorkflowConditionalCloseType) Set(val *WorkflowConditionalCloseType) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowConditionalCloseType) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowConditionalCloseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowConditionalCloseType(val *WorkflowConditionalCloseType) *NullableWorkflowConditionalCloseType {
	return &NullableWorkflowConditionalCloseType{value: val, isSet: true}
}

func (v NullableWorkflowConditionalCloseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowConditionalCloseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
