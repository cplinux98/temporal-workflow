/*
Workflow APIs

This APIs for iwf SDKs to operate workflows

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iwfidl

import (
	"encoding/json"
	"fmt"
)

// WorkflowIDReusePolicy the model 'WorkflowIDReusePolicy'
type WorkflowIDReusePolicy string

// List of WorkflowIDReusePolicy
const (
	ALLOW_DUPLICATE_FAILED_ONLY WorkflowIDReusePolicy = "ALLOW_DUPLICATE_FAILED_ONLY"
	ALLOW_DUPLICATE             WorkflowIDReusePolicy = "ALLOW_DUPLICATE"
	REJECT_DUPLICATE            WorkflowIDReusePolicy = "REJECT_DUPLICATE"
	TERMINATE_IF_RUNNING        WorkflowIDReusePolicy = "TERMINATE_IF_RUNNING"
)

// All allowed values of WorkflowIDReusePolicy enum
var AllowedWorkflowIDReusePolicyEnumValues = []WorkflowIDReusePolicy{
	"ALLOW_DUPLICATE_FAILED_ONLY",
	"ALLOW_DUPLICATE",
	"REJECT_DUPLICATE",
	"TERMINATE_IF_RUNNING",
}

func (v *WorkflowIDReusePolicy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WorkflowIDReusePolicy(value)
	for _, existing := range AllowedWorkflowIDReusePolicyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WorkflowIDReusePolicy", value)
}

// NewWorkflowIDReusePolicyFromValue returns a pointer to a valid WorkflowIDReusePolicy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkflowIDReusePolicyFromValue(v string) (*WorkflowIDReusePolicy, error) {
	ev := WorkflowIDReusePolicy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WorkflowIDReusePolicy: valid values are %v", v, AllowedWorkflowIDReusePolicyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WorkflowIDReusePolicy) IsValid() bool {
	for _, existing := range AllowedWorkflowIDReusePolicyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WorkflowIDReusePolicy value
func (v WorkflowIDReusePolicy) Ptr() *WorkflowIDReusePolicy {
	return &v
}

type NullableWorkflowIDReusePolicy struct {
	value *WorkflowIDReusePolicy
	isSet bool
}

func (v NullableWorkflowIDReusePolicy) Get() *WorkflowIDReusePolicy {
	return v.value
}

func (v *NullableWorkflowIDReusePolicy) Set(val *WorkflowIDReusePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowIDReusePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowIDReusePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowIDReusePolicy(val *WorkflowIDReusePolicy) *NullableWorkflowIDReusePolicy {
	return &NullableWorkflowIDReusePolicy{value: val, isSet: true}
}

func (v NullableWorkflowIDReusePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowIDReusePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
