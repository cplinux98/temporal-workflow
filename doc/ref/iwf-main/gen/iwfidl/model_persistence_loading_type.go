/*
Workflow APIs

This APIs for iwf SDKs to operate workflows

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iwfidl

import (
	"encoding/json"
	"fmt"
)

// PersistenceLoadingType the model 'PersistenceLoadingType'
type PersistenceLoadingType string

// List of PersistenceLoadingType
const (
	ALL_WITHOUT_LOCKING         PersistenceLoadingType = "LOAD_ALL_WITHOUT_LOCKING"
	PARTIAL_WITHOUT_LOCKING     PersistenceLoadingType = "LOAD_PARTIAL_WITHOUT_LOCKING"
	PARTIAL_WITH_EXCLUSIVE_LOCK PersistenceLoadingType = "LOAD_PARTIAL_WITH_EXCLUSIVE_LOCK"
	NONE                        PersistenceLoadingType = "LOAD_NONE"
	ALL_WITH_PARTIAL_LOCK       PersistenceLoadingType = "LOAD_ALL_WITH_PARTIAL_LOCK"
)

// All allowed values of PersistenceLoadingType enum
var AllowedPersistenceLoadingTypeEnumValues = []PersistenceLoadingType{
	"LOAD_ALL_WITHOUT_LOCKING",
	"LOAD_PARTIAL_WITHOUT_LOCKING",
	"LOAD_PARTIAL_WITH_EXCLUSIVE_LOCK",
	"LOAD_NONE",
	"LOAD_ALL_WITH_PARTIAL_LOCK",
}

func (v *PersistenceLoadingType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PersistenceLoadingType(value)
	for _, existing := range AllowedPersistenceLoadingTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PersistenceLoadingType", value)
}

// NewPersistenceLoadingTypeFromValue returns a pointer to a valid PersistenceLoadingType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPersistenceLoadingTypeFromValue(v string) (*PersistenceLoadingType, error) {
	ev := PersistenceLoadingType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PersistenceLoadingType: valid values are %v", v, AllowedPersistenceLoadingTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PersistenceLoadingType) IsValid() bool {
	for _, existing := range AllowedPersistenceLoadingTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PersistenceLoadingType value
func (v PersistenceLoadingType) Ptr() *PersistenceLoadingType {
	return &v
}

type NullablePersistenceLoadingType struct {
	value *PersistenceLoadingType
	isSet bool
}

func (v NullablePersistenceLoadingType) Get() *PersistenceLoadingType {
	return v.value
}

func (v *NullablePersistenceLoadingType) Set(val *PersistenceLoadingType) {
	v.value = val
	v.isSet = true
}

func (v NullablePersistenceLoadingType) IsSet() bool {
	return v.isSet
}

func (v *NullablePersistenceLoadingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersistenceLoadingType(val *PersistenceLoadingType) *NullablePersistenceLoadingType {
	return &NullablePersistenceLoadingType{value: val, isSet: true}
}

func (v NullablePersistenceLoadingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersistenceLoadingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
