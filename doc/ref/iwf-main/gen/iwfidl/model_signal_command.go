/*
Workflow APIs

This APIs for iwf SDKs to operate workflows

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iwfidl

import (
	"encoding/json"
)

// checks if the SignalCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignalCommand{}

// SignalCommand struct for SignalCommand
type SignalCommand struct {
	CommandId         string `json:"commandId"`
	SignalChannelName string `json:"signalChannelName"`
	AtLeast           *int32 `json:"atLeast,omitempty"`
	AtMost            *int32 `json:"atMost,omitempty"`
}

// NewSignalCommand instantiates a new SignalCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignalCommand(commandId string, signalChannelName string) *SignalCommand {
	this := SignalCommand{}
	this.CommandId = commandId
	this.SignalChannelName = signalChannelName
	return &this
}

// NewSignalCommandWithDefaults instantiates a new SignalCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignalCommandWithDefaults() *SignalCommand {
	this := SignalCommand{}
	return &this
}

// GetCommandId returns the CommandId field value
func (o *SignalCommand) GetCommandId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommandId
}

// GetCommandIdOk returns a tuple with the CommandId field value
// and a boolean to check if the value has been set.
func (o *SignalCommand) GetCommandIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommandId, true
}

// SetCommandId sets field value
func (o *SignalCommand) SetCommandId(v string) {
	o.CommandId = v
}

// GetSignalChannelName returns the SignalChannelName field value
func (o *SignalCommand) GetSignalChannelName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignalChannelName
}

// GetSignalChannelNameOk returns a tuple with the SignalChannelName field value
// and a boolean to check if the value has been set.
func (o *SignalCommand) GetSignalChannelNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignalChannelName, true
}

// SetSignalChannelName sets field value
func (o *SignalCommand) SetSignalChannelName(v string) {
	o.SignalChannelName = v
}

// GetAtLeast returns the AtLeast field value if set, zero value otherwise.
func (o *SignalCommand) GetAtLeast() int32 {
	if o == nil || IsNil(o.AtLeast) {
		var ret int32
		return ret
	}
	return *o.AtLeast
}

// GetAtLeastOk returns a tuple with the AtLeast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignalCommand) GetAtLeastOk() (*int32, bool) {
	if o == nil || IsNil(o.AtLeast) {
		return nil, false
	}
	return o.AtLeast, true
}

// HasAtLeast returns a boolean if a field has been set.
func (o *SignalCommand) HasAtLeast() bool {
	if o != nil && !IsNil(o.AtLeast) {
		return true
	}

	return false
}

// SetAtLeast gets a reference to the given int32 and assigns it to the AtLeast field.
func (o *SignalCommand) SetAtLeast(v int32) {
	o.AtLeast = &v
}

// GetAtMost returns the AtMost field value if set, zero value otherwise.
func (o *SignalCommand) GetAtMost() int32 {
	if o == nil || IsNil(o.AtMost) {
		var ret int32
		return ret
	}
	return *o.AtMost
}

// GetAtMostOk returns a tuple with the AtMost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignalCommand) GetAtMostOk() (*int32, bool) {
	if o == nil || IsNil(o.AtMost) {
		return nil, false
	}
	return o.AtMost, true
}

// HasAtMost returns a boolean if a field has been set.
func (o *SignalCommand) HasAtMost() bool {
	if o != nil && !IsNil(o.AtMost) {
		return true
	}

	return false
}

// SetAtMost gets a reference to the given int32 and assigns it to the AtMost field.
func (o *SignalCommand) SetAtMost(v int32) {
	o.AtMost = &v
}

func (o SignalCommand) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignalCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["commandId"] = o.CommandId
	toSerialize["signalChannelName"] = o.SignalChannelName
	if !IsNil(o.AtLeast) {
		toSerialize["atLeast"] = o.AtLeast
	}
	if !IsNil(o.AtMost) {
		toSerialize["atMost"] = o.AtMost
	}
	return toSerialize, nil
}

type NullableSignalCommand struct {
	value *SignalCommand
	isSet bool
}

func (v NullableSignalCommand) Get() *SignalCommand {
	return v.value
}

func (v *NullableSignalCommand) Set(val *SignalCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableSignalCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableSignalCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignalCommand(val *SignalCommand) *NullableSignalCommand {
	return &NullableSignalCommand{value: val, isSet: true}
}

func (v NullableSignalCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignalCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
