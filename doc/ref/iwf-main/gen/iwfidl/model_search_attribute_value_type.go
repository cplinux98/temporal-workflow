/*
Workflow APIs

This APIs for iwf SDKs to operate workflows

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iwfidl

import (
	"encoding/json"
	"fmt"
)

// SearchAttributeValueType the model 'SearchAttributeValueType'
type SearchAttributeValueType string

// List of SearchAttributeValueType
const (
	KEYWORD       SearchAttributeValueType = "KEYWORD"
	TEXT          SearchAttributeValueType = "TEXT"
	DATETIME      SearchAttributeValueType = "DATETIME"
	INT           SearchAttributeValueType = "INT"
	DOUBLE        SearchAttributeValueType = "DOUBLE"
	BOOL          SearchAttributeValueType = "BOOL"
	KEYWORD_ARRAY SearchAttributeValueType = "KEYWORD_ARRAY"
)

// All allowed values of SearchAttributeValueType enum
var AllowedSearchAttributeValueTypeEnumValues = []SearchAttributeValueType{
	"KEYWORD",
	"TEXT",
	"DATETIME",
	"INT",
	"DOUBLE",
	"BOOL",
	"KEYWORD_ARRAY",
}

func (v *SearchAttributeValueType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SearchAttributeValueType(value)
	for _, existing := range AllowedSearchAttributeValueTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SearchAttributeValueType", value)
}

// NewSearchAttributeValueTypeFromValue returns a pointer to a valid SearchAttributeValueType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSearchAttributeValueTypeFromValue(v string) (*SearchAttributeValueType, error) {
	ev := SearchAttributeValueType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SearchAttributeValueType: valid values are %v", v, AllowedSearchAttributeValueTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SearchAttributeValueType) IsValid() bool {
	for _, existing := range AllowedSearchAttributeValueTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SearchAttributeValueType value
func (v SearchAttributeValueType) Ptr() *SearchAttributeValueType {
	return &v
}

type NullableSearchAttributeValueType struct {
	value *SearchAttributeValueType
	isSet bool
}

func (v NullableSearchAttributeValueType) Get() *SearchAttributeValueType {
	return v.value
}

func (v *NullableSearchAttributeValueType) Set(val *SearchAttributeValueType) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchAttributeValueType) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchAttributeValueType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchAttributeValueType(val *SearchAttributeValueType) *NullableSearchAttributeValueType {
	return &NullableSearchAttributeValueType{value: val, isSet: true}
}

func (v NullableSearchAttributeValueType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchAttributeValueType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
