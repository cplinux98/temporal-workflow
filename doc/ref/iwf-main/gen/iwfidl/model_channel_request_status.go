/*
Workflow APIs

This APIs for iwf SDKs to operate workflows

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iwfidl

import (
	"encoding/json"
	"fmt"
)

// ChannelRequestStatus the model 'ChannelRequestStatus'
type ChannelRequestStatus string

// List of ChannelRequestStatus
const (
	WAITING  ChannelRequestStatus = "WAITING"
	RECEIVED ChannelRequestStatus = "RECEIVED"
)

// All allowed values of ChannelRequestStatus enum
var AllowedChannelRequestStatusEnumValues = []ChannelRequestStatus{
	"WAITING",
	"RECEIVED",
}

func (v *ChannelRequestStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChannelRequestStatus(value)
	for _, existing := range AllowedChannelRequestStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChannelRequestStatus", value)
}

// NewChannelRequestStatusFromValue returns a pointer to a valid ChannelRequestStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChannelRequestStatusFromValue(v string) (*ChannelRequestStatus, error) {
	ev := ChannelRequestStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChannelRequestStatus: valid values are %v", v, AllowedChannelRequestStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChannelRequestStatus) IsValid() bool {
	for _, existing := range AllowedChannelRequestStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ChannelRequestStatus value
func (v ChannelRequestStatus) Ptr() *ChannelRequestStatus {
	return &v
}

type NullableChannelRequestStatus struct {
	value *ChannelRequestStatus
	isSet bool
}

func (v NullableChannelRequestStatus) Get() *ChannelRequestStatus {
	return v.value
}

func (v *NullableChannelRequestStatus) Set(val *ChannelRequestStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelRequestStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelRequestStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelRequestStatus(val *ChannelRequestStatus) *NullableChannelRequestStatus {
	return &NullableChannelRequestStatus{value: val, isSet: true}
}

func (v NullableChannelRequestStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelRequestStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
