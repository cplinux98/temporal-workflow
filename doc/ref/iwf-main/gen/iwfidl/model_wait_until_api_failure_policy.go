/*
Workflow APIs

This APIs for iwf SDKs to operate workflows

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iwfidl

import (
	"encoding/json"
	"fmt"
)

// WaitUntilApiFailurePolicy the model 'WaitUntilApiFailurePolicy'
type WaitUntilApiFailurePolicy string

// List of WaitUntilApiFailurePolicy
const (
	FAIL_WORKFLOW_ON_FAILURE WaitUntilApiFailurePolicy = "FAIL_WORKFLOW_ON_FAILURE"
	PROCEED_ON_FAILURE       WaitUntilApiFailurePolicy = "PROCEED_ON_FAILURE"
)

// All allowed values of WaitUntilApiFailurePolicy enum
var AllowedWaitUntilApiFailurePolicyEnumValues = []WaitUntilApiFailurePolicy{
	"FAIL_WORKFLOW_ON_FAILURE",
	"PROCEED_ON_FAILURE",
}

func (v *WaitUntilApiFailurePolicy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WaitUntilApiFailurePolicy(value)
	for _, existing := range AllowedWaitUntilApiFailurePolicyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WaitUntilApiFailurePolicy", value)
}

// NewWaitUntilApiFailurePolicyFromValue returns a pointer to a valid WaitUntilApiFailurePolicy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWaitUntilApiFailurePolicyFromValue(v string) (*WaitUntilApiFailurePolicy, error) {
	ev := WaitUntilApiFailurePolicy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WaitUntilApiFailurePolicy: valid values are %v", v, AllowedWaitUntilApiFailurePolicyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WaitUntilApiFailurePolicy) IsValid() bool {
	for _, existing := range AllowedWaitUntilApiFailurePolicyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WaitUntilApiFailurePolicy value
func (v WaitUntilApiFailurePolicy) Ptr() *WaitUntilApiFailurePolicy {
	return &v
}

type NullableWaitUntilApiFailurePolicy struct {
	value *WaitUntilApiFailurePolicy
	isSet bool
}

func (v NullableWaitUntilApiFailurePolicy) Get() *WaitUntilApiFailurePolicy {
	return v.value
}

func (v *NullableWaitUntilApiFailurePolicy) Set(val *WaitUntilApiFailurePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableWaitUntilApiFailurePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableWaitUntilApiFailurePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWaitUntilApiFailurePolicy(val *WaitUntilApiFailurePolicy) *NullableWaitUntilApiFailurePolicy {
	return &NullableWaitUntilApiFailurePolicy{value: val, isSet: true}
}

func (v NullableWaitUntilApiFailurePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWaitUntilApiFailurePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
