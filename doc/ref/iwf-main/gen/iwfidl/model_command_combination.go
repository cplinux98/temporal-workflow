/*
Workflow APIs

This APIs for iwf SDKs to operate workflows

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iwfidl

import (
	"encoding/json"
)

// checks if the CommandCombination type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommandCombination{}

// CommandCombination struct for CommandCombination
type CommandCombination struct {
	CommandIds []string `json:"commandIds,omitempty"`
}

// NewCommandCombination instantiates a new CommandCombination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommandCombination() *CommandCombination {
	this := CommandCombination{}
	return &this
}

// NewCommandCombinationWithDefaults instantiates a new CommandCombination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommandCombinationWithDefaults() *CommandCombination {
	this := CommandCombination{}
	return &this
}

// GetCommandIds returns the CommandIds field value if set, zero value otherwise.
func (o *CommandCombination) GetCommandIds() []string {
	if o == nil || IsNil(o.CommandIds) {
		var ret []string
		return ret
	}
	return o.CommandIds
}

// GetCommandIdsOk returns a tuple with the CommandIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommandCombination) GetCommandIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.CommandIds) {
		return nil, false
	}
	return o.CommandIds, true
}

// HasCommandIds returns a boolean if a field has been set.
func (o *CommandCombination) HasCommandIds() bool {
	if o != nil && !IsNil(o.CommandIds) {
		return true
	}

	return false
}

// SetCommandIds gets a reference to the given []string and assigns it to the CommandIds field.
func (o *CommandCombination) SetCommandIds(v []string) {
	o.CommandIds = v
}

func (o CommandCombination) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommandCombination) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CommandIds) {
		toSerialize["commandIds"] = o.CommandIds
	}
	return toSerialize, nil
}

type NullableCommandCombination struct {
	value *CommandCombination
	isSet bool
}

func (v NullableCommandCombination) Get() *CommandCombination {
	return v.value
}

func (v *NullableCommandCombination) Set(val *CommandCombination) {
	v.value = val
	v.isSet = true
}

func (v NullableCommandCombination) IsSet() bool {
	return v.isSet
}

func (v *NullableCommandCombination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommandCombination(val *CommandCombination) *NullableCommandCombination {
	return &NullableCommandCombination{value: val, isSet: true}
}

func (v NullableCommandCombination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommandCombination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
