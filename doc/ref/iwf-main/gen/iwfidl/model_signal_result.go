/*
Workflow APIs

This APIs for iwf SDKs to operate workflows

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iwfidl

import (
	"encoding/json"
)

// checks if the SignalResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignalResult{}

// SignalResult struct for SignalResult
type SignalResult struct {
	CommandId           string               `json:"commandId"`
	SignalRequestStatus ChannelRequestStatus `json:"signalRequestStatus"`
	SignalChannelName   string               `json:"signalChannelName"`
	SignalValue         *EncodedObject       `json:"signalValue,omitempty"`
}

// NewSignalResult instantiates a new SignalResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignalResult(commandId string, signalRequestStatus ChannelRequestStatus, signalChannelName string) *SignalResult {
	this := SignalResult{}
	this.CommandId = commandId
	this.SignalRequestStatus = signalRequestStatus
	this.SignalChannelName = signalChannelName
	return &this
}

// NewSignalResultWithDefaults instantiates a new SignalResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignalResultWithDefaults() *SignalResult {
	this := SignalResult{}
	return &this
}

// GetCommandId returns the CommandId field value
func (o *SignalResult) GetCommandId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommandId
}

// GetCommandIdOk returns a tuple with the CommandId field value
// and a boolean to check if the value has been set.
func (o *SignalResult) GetCommandIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommandId, true
}

// SetCommandId sets field value
func (o *SignalResult) SetCommandId(v string) {
	o.CommandId = v
}

// GetSignalRequestStatus returns the SignalRequestStatus field value
func (o *SignalResult) GetSignalRequestStatus() ChannelRequestStatus {
	if o == nil {
		var ret ChannelRequestStatus
		return ret
	}

	return o.SignalRequestStatus
}

// GetSignalRequestStatusOk returns a tuple with the SignalRequestStatus field value
// and a boolean to check if the value has been set.
func (o *SignalResult) GetSignalRequestStatusOk() (*ChannelRequestStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignalRequestStatus, true
}

// SetSignalRequestStatus sets field value
func (o *SignalResult) SetSignalRequestStatus(v ChannelRequestStatus) {
	o.SignalRequestStatus = v
}

// GetSignalChannelName returns the SignalChannelName field value
func (o *SignalResult) GetSignalChannelName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignalChannelName
}

// GetSignalChannelNameOk returns a tuple with the SignalChannelName field value
// and a boolean to check if the value has been set.
func (o *SignalResult) GetSignalChannelNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignalChannelName, true
}

// SetSignalChannelName sets field value
func (o *SignalResult) SetSignalChannelName(v string) {
	o.SignalChannelName = v
}

// GetSignalValue returns the SignalValue field value if set, zero value otherwise.
func (o *SignalResult) GetSignalValue() EncodedObject {
	if o == nil || IsNil(o.SignalValue) {
		var ret EncodedObject
		return ret
	}
	return *o.SignalValue
}

// GetSignalValueOk returns a tuple with the SignalValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignalResult) GetSignalValueOk() (*EncodedObject, bool) {
	if o == nil || IsNil(o.SignalValue) {
		return nil, false
	}
	return o.SignalValue, true
}

// HasSignalValue returns a boolean if a field has been set.
func (o *SignalResult) HasSignalValue() bool {
	if o != nil && !IsNil(o.SignalValue) {
		return true
	}

	return false
}

// SetSignalValue gets a reference to the given EncodedObject and assigns it to the SignalValue field.
func (o *SignalResult) SetSignalValue(v EncodedObject) {
	o.SignalValue = &v
}

func (o SignalResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignalResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["commandId"] = o.CommandId
	toSerialize["signalRequestStatus"] = o.SignalRequestStatus
	toSerialize["signalChannelName"] = o.SignalChannelName
	if !IsNil(o.SignalValue) {
		toSerialize["signalValue"] = o.SignalValue
	}
	return toSerialize, nil
}

type NullableSignalResult struct {
	value *SignalResult
	isSet bool
}

func (v NullableSignalResult) Get() *SignalResult {
	return v.value
}

func (v *NullableSignalResult) Set(val *SignalResult) {
	v.value = val
	v.isSet = true
}

func (v NullableSignalResult) IsSet() bool {
	return v.isSet
}

func (v *NullableSignalResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignalResult(val *SignalResult) *NullableSignalResult {
	return &NullableSignalResult{value: val, isSet: true}
}

func (v NullableSignalResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignalResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
