/*
Workflow APIs

This APIs for iwf SDKs to operate workflows

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iwfidl

import (
	"encoding/json"
)

// checks if the WorkflowStateOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkflowStateOptions{}

// WorkflowStateOptions struct for WorkflowStateOptions
type WorkflowStateOptions struct {
	SearchAttributesLoadingPolicy        *PersistenceLoadingPolicy  `json:"searchAttributesLoadingPolicy,omitempty"`
	DataObjectsLoadingPolicy             *PersistenceLoadingPolicy  `json:"dataObjectsLoadingPolicy,omitempty"`
	StartApiTimeoutSeconds               *int32                     `json:"startApiTimeoutSeconds,omitempty"`
	DecideApiTimeoutSeconds              *int32                     `json:"decideApiTimeoutSeconds,omitempty"`
	StartApiRetryPolicy                  *RetryPolicy               `json:"startApiRetryPolicy,omitempty"`
	DecideApiRetryPolicy                 *RetryPolicy               `json:"decideApiRetryPolicy,omitempty"`
	StartApiFailurePolicy                *StartApiFailurePolicy     `json:"startApiFailurePolicy,omitempty"`
	ExecuteApiFailurePolicy              *ExecuteApiFailurePolicy   `json:"executeApiFailurePolicy,omitempty"`
	ExecuteApiFailureProceedStateId      *string                    `json:"executeApiFailureProceedStateId,omitempty"`
	ExecuteApiFailureProceedStateOptions *WorkflowStateOptions      `json:"executeApiFailureProceedStateOptions,omitempty"`
	SkipStartApi                         *bool                      `json:"skipStartApi,omitempty"`
	WaitUntilApiTimeoutSeconds           *int32                     `json:"waitUntilApiTimeoutSeconds,omitempty"`
	ExecuteApiTimeoutSeconds             *int32                     `json:"executeApiTimeoutSeconds,omitempty"`
	WaitUntilApiRetryPolicy              *RetryPolicy               `json:"waitUntilApiRetryPolicy,omitempty"`
	ExecuteApiRetryPolicy                *RetryPolicy               `json:"executeApiRetryPolicy,omitempty"`
	WaitUntilApiFailurePolicy            *WaitUntilApiFailurePolicy `json:"waitUntilApiFailurePolicy,omitempty"`
	SkipWaitUntil                        *bool                      `json:"skipWaitUntil,omitempty"`
	DataAttributesLoadingPolicy          *PersistenceLoadingPolicy  `json:"dataAttributesLoadingPolicy,omitempty"`
}

// NewWorkflowStateOptions instantiates a new WorkflowStateOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowStateOptions() *WorkflowStateOptions {
	this := WorkflowStateOptions{}
	return &this
}

// NewWorkflowStateOptionsWithDefaults instantiates a new WorkflowStateOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowStateOptionsWithDefaults() *WorkflowStateOptions {
	this := WorkflowStateOptions{}
	return &this
}

// GetSearchAttributesLoadingPolicy returns the SearchAttributesLoadingPolicy field value if set, zero value otherwise.
func (o *WorkflowStateOptions) GetSearchAttributesLoadingPolicy() PersistenceLoadingPolicy {
	if o == nil || IsNil(o.SearchAttributesLoadingPolicy) {
		var ret PersistenceLoadingPolicy
		return ret
	}
	return *o.SearchAttributesLoadingPolicy
}

// GetSearchAttributesLoadingPolicyOk returns a tuple with the SearchAttributesLoadingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStateOptions) GetSearchAttributesLoadingPolicyOk() (*PersistenceLoadingPolicy, bool) {
	if o == nil || IsNil(o.SearchAttributesLoadingPolicy) {
		return nil, false
	}
	return o.SearchAttributesLoadingPolicy, true
}

// HasSearchAttributesLoadingPolicy returns a boolean if a field has been set.
func (o *WorkflowStateOptions) HasSearchAttributesLoadingPolicy() bool {
	if o != nil && !IsNil(o.SearchAttributesLoadingPolicy) {
		return true
	}

	return false
}

// SetSearchAttributesLoadingPolicy gets a reference to the given PersistenceLoadingPolicy and assigns it to the SearchAttributesLoadingPolicy field.
func (o *WorkflowStateOptions) SetSearchAttributesLoadingPolicy(v PersistenceLoadingPolicy) {
	o.SearchAttributesLoadingPolicy = &v
}

// GetDataObjectsLoadingPolicy returns the DataObjectsLoadingPolicy field value if set, zero value otherwise.
func (o *WorkflowStateOptions) GetDataObjectsLoadingPolicy() PersistenceLoadingPolicy {
	if o == nil || IsNil(o.DataObjectsLoadingPolicy) {
		var ret PersistenceLoadingPolicy
		return ret
	}
	return *o.DataObjectsLoadingPolicy
}

// GetDataObjectsLoadingPolicyOk returns a tuple with the DataObjectsLoadingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStateOptions) GetDataObjectsLoadingPolicyOk() (*PersistenceLoadingPolicy, bool) {
	if o == nil || IsNil(o.DataObjectsLoadingPolicy) {
		return nil, false
	}
	return o.DataObjectsLoadingPolicy, true
}

// HasDataObjectsLoadingPolicy returns a boolean if a field has been set.
func (o *WorkflowStateOptions) HasDataObjectsLoadingPolicy() bool {
	if o != nil && !IsNil(o.DataObjectsLoadingPolicy) {
		return true
	}

	return false
}

// SetDataObjectsLoadingPolicy gets a reference to the given PersistenceLoadingPolicy and assigns it to the DataObjectsLoadingPolicy field.
func (o *WorkflowStateOptions) SetDataObjectsLoadingPolicy(v PersistenceLoadingPolicy) {
	o.DataObjectsLoadingPolicy = &v
}

// GetStartApiTimeoutSeconds returns the StartApiTimeoutSeconds field value if set, zero value otherwise.
func (o *WorkflowStateOptions) GetStartApiTimeoutSeconds() int32 {
	if o == nil || IsNil(o.StartApiTimeoutSeconds) {
		var ret int32
		return ret
	}
	return *o.StartApiTimeoutSeconds
}

// GetStartApiTimeoutSecondsOk returns a tuple with the StartApiTimeoutSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStateOptions) GetStartApiTimeoutSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.StartApiTimeoutSeconds) {
		return nil, false
	}
	return o.StartApiTimeoutSeconds, true
}

// HasStartApiTimeoutSeconds returns a boolean if a field has been set.
func (o *WorkflowStateOptions) HasStartApiTimeoutSeconds() bool {
	if o != nil && !IsNil(o.StartApiTimeoutSeconds) {
		return true
	}

	return false
}

// SetStartApiTimeoutSeconds gets a reference to the given int32 and assigns it to the StartApiTimeoutSeconds field.
func (o *WorkflowStateOptions) SetStartApiTimeoutSeconds(v int32) {
	o.StartApiTimeoutSeconds = &v
}

// GetDecideApiTimeoutSeconds returns the DecideApiTimeoutSeconds field value if set, zero value otherwise.
func (o *WorkflowStateOptions) GetDecideApiTimeoutSeconds() int32 {
	if o == nil || IsNil(o.DecideApiTimeoutSeconds) {
		var ret int32
		return ret
	}
	return *o.DecideApiTimeoutSeconds
}

// GetDecideApiTimeoutSecondsOk returns a tuple with the DecideApiTimeoutSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStateOptions) GetDecideApiTimeoutSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.DecideApiTimeoutSeconds) {
		return nil, false
	}
	return o.DecideApiTimeoutSeconds, true
}

// HasDecideApiTimeoutSeconds returns a boolean if a field has been set.
func (o *WorkflowStateOptions) HasDecideApiTimeoutSeconds() bool {
	if o != nil && !IsNil(o.DecideApiTimeoutSeconds) {
		return true
	}

	return false
}

// SetDecideApiTimeoutSeconds gets a reference to the given int32 and assigns it to the DecideApiTimeoutSeconds field.
func (o *WorkflowStateOptions) SetDecideApiTimeoutSeconds(v int32) {
	o.DecideApiTimeoutSeconds = &v
}

// GetStartApiRetryPolicy returns the StartApiRetryPolicy field value if set, zero value otherwise.
func (o *WorkflowStateOptions) GetStartApiRetryPolicy() RetryPolicy {
	if o == nil || IsNil(o.StartApiRetryPolicy) {
		var ret RetryPolicy
		return ret
	}
	return *o.StartApiRetryPolicy
}

// GetStartApiRetryPolicyOk returns a tuple with the StartApiRetryPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStateOptions) GetStartApiRetryPolicyOk() (*RetryPolicy, bool) {
	if o == nil || IsNil(o.StartApiRetryPolicy) {
		return nil, false
	}
	return o.StartApiRetryPolicy, true
}

// HasStartApiRetryPolicy returns a boolean if a field has been set.
func (o *WorkflowStateOptions) HasStartApiRetryPolicy() bool {
	if o != nil && !IsNil(o.StartApiRetryPolicy) {
		return true
	}

	return false
}

// SetStartApiRetryPolicy gets a reference to the given RetryPolicy and assigns it to the StartApiRetryPolicy field.
func (o *WorkflowStateOptions) SetStartApiRetryPolicy(v RetryPolicy) {
	o.StartApiRetryPolicy = &v
}

// GetDecideApiRetryPolicy returns the DecideApiRetryPolicy field value if set, zero value otherwise.
func (o *WorkflowStateOptions) GetDecideApiRetryPolicy() RetryPolicy {
	if o == nil || IsNil(o.DecideApiRetryPolicy) {
		var ret RetryPolicy
		return ret
	}
	return *o.DecideApiRetryPolicy
}

// GetDecideApiRetryPolicyOk returns a tuple with the DecideApiRetryPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStateOptions) GetDecideApiRetryPolicyOk() (*RetryPolicy, bool) {
	if o == nil || IsNil(o.DecideApiRetryPolicy) {
		return nil, false
	}
	return o.DecideApiRetryPolicy, true
}

// HasDecideApiRetryPolicy returns a boolean if a field has been set.
func (o *WorkflowStateOptions) HasDecideApiRetryPolicy() bool {
	if o != nil && !IsNil(o.DecideApiRetryPolicy) {
		return true
	}

	return false
}

// SetDecideApiRetryPolicy gets a reference to the given RetryPolicy and assigns it to the DecideApiRetryPolicy field.
func (o *WorkflowStateOptions) SetDecideApiRetryPolicy(v RetryPolicy) {
	o.DecideApiRetryPolicy = &v
}

// GetStartApiFailurePolicy returns the StartApiFailurePolicy field value if set, zero value otherwise.
func (o *WorkflowStateOptions) GetStartApiFailurePolicy() StartApiFailurePolicy {
	if o == nil || IsNil(o.StartApiFailurePolicy) {
		var ret StartApiFailurePolicy
		return ret
	}
	return *o.StartApiFailurePolicy
}

// GetStartApiFailurePolicyOk returns a tuple with the StartApiFailurePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStateOptions) GetStartApiFailurePolicyOk() (*StartApiFailurePolicy, bool) {
	if o == nil || IsNil(o.StartApiFailurePolicy) {
		return nil, false
	}
	return o.StartApiFailurePolicy, true
}

// HasStartApiFailurePolicy returns a boolean if a field has been set.
func (o *WorkflowStateOptions) HasStartApiFailurePolicy() bool {
	if o != nil && !IsNil(o.StartApiFailurePolicy) {
		return true
	}

	return false
}

// SetStartApiFailurePolicy gets a reference to the given StartApiFailurePolicy and assigns it to the StartApiFailurePolicy field.
func (o *WorkflowStateOptions) SetStartApiFailurePolicy(v StartApiFailurePolicy) {
	o.StartApiFailurePolicy = &v
}

// GetExecuteApiFailurePolicy returns the ExecuteApiFailurePolicy field value if set, zero value otherwise.
func (o *WorkflowStateOptions) GetExecuteApiFailurePolicy() ExecuteApiFailurePolicy {
	if o == nil || IsNil(o.ExecuteApiFailurePolicy) {
		var ret ExecuteApiFailurePolicy
		return ret
	}
	return *o.ExecuteApiFailurePolicy
}

// GetExecuteApiFailurePolicyOk returns a tuple with the ExecuteApiFailurePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStateOptions) GetExecuteApiFailurePolicyOk() (*ExecuteApiFailurePolicy, bool) {
	if o == nil || IsNil(o.ExecuteApiFailurePolicy) {
		return nil, false
	}
	return o.ExecuteApiFailurePolicy, true
}

// HasExecuteApiFailurePolicy returns a boolean if a field has been set.
func (o *WorkflowStateOptions) HasExecuteApiFailurePolicy() bool {
	if o != nil && !IsNil(o.ExecuteApiFailurePolicy) {
		return true
	}

	return false
}

// SetExecuteApiFailurePolicy gets a reference to the given ExecuteApiFailurePolicy and assigns it to the ExecuteApiFailurePolicy field.
func (o *WorkflowStateOptions) SetExecuteApiFailurePolicy(v ExecuteApiFailurePolicy) {
	o.ExecuteApiFailurePolicy = &v
}

// GetExecuteApiFailureProceedStateId returns the ExecuteApiFailureProceedStateId field value if set, zero value otherwise.
func (o *WorkflowStateOptions) GetExecuteApiFailureProceedStateId() string {
	if o == nil || IsNil(o.ExecuteApiFailureProceedStateId) {
		var ret string
		return ret
	}
	return *o.ExecuteApiFailureProceedStateId
}

// GetExecuteApiFailureProceedStateIdOk returns a tuple with the ExecuteApiFailureProceedStateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStateOptions) GetExecuteApiFailureProceedStateIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExecuteApiFailureProceedStateId) {
		return nil, false
	}
	return o.ExecuteApiFailureProceedStateId, true
}

// HasExecuteApiFailureProceedStateId returns a boolean if a field has been set.
func (o *WorkflowStateOptions) HasExecuteApiFailureProceedStateId() bool {
	if o != nil && !IsNil(o.ExecuteApiFailureProceedStateId) {
		return true
	}

	return false
}

// SetExecuteApiFailureProceedStateId gets a reference to the given string and assigns it to the ExecuteApiFailureProceedStateId field.
func (o *WorkflowStateOptions) SetExecuteApiFailureProceedStateId(v string) {
	o.ExecuteApiFailureProceedStateId = &v
}

// GetExecuteApiFailureProceedStateOptions returns the ExecuteApiFailureProceedStateOptions field value if set, zero value otherwise.
func (o *WorkflowStateOptions) GetExecuteApiFailureProceedStateOptions() WorkflowStateOptions {
	if o == nil || IsNil(o.ExecuteApiFailureProceedStateOptions) {
		var ret WorkflowStateOptions
		return ret
	}
	return *o.ExecuteApiFailureProceedStateOptions
}

// GetExecuteApiFailureProceedStateOptionsOk returns a tuple with the ExecuteApiFailureProceedStateOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStateOptions) GetExecuteApiFailureProceedStateOptionsOk() (*WorkflowStateOptions, bool) {
	if o == nil || IsNil(o.ExecuteApiFailureProceedStateOptions) {
		return nil, false
	}
	return o.ExecuteApiFailureProceedStateOptions, true
}

// HasExecuteApiFailureProceedStateOptions returns a boolean if a field has been set.
func (o *WorkflowStateOptions) HasExecuteApiFailureProceedStateOptions() bool {
	if o != nil && !IsNil(o.ExecuteApiFailureProceedStateOptions) {
		return true
	}

	return false
}

// SetExecuteApiFailureProceedStateOptions gets a reference to the given WorkflowStateOptions and assigns it to the ExecuteApiFailureProceedStateOptions field.
func (o *WorkflowStateOptions) SetExecuteApiFailureProceedStateOptions(v WorkflowStateOptions) {
	o.ExecuteApiFailureProceedStateOptions = &v
}

// GetSkipStartApi returns the SkipStartApi field value if set, zero value otherwise.
func (o *WorkflowStateOptions) GetSkipStartApi() bool {
	if o == nil || IsNil(o.SkipStartApi) {
		var ret bool
		return ret
	}
	return *o.SkipStartApi
}

// GetSkipStartApiOk returns a tuple with the SkipStartApi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStateOptions) GetSkipStartApiOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipStartApi) {
		return nil, false
	}
	return o.SkipStartApi, true
}

// HasSkipStartApi returns a boolean if a field has been set.
func (o *WorkflowStateOptions) HasSkipStartApi() bool {
	if o != nil && !IsNil(o.SkipStartApi) {
		return true
	}

	return false
}

// SetSkipStartApi gets a reference to the given bool and assigns it to the SkipStartApi field.
func (o *WorkflowStateOptions) SetSkipStartApi(v bool) {
	o.SkipStartApi = &v
}

// GetWaitUntilApiTimeoutSeconds returns the WaitUntilApiTimeoutSeconds field value if set, zero value otherwise.
func (o *WorkflowStateOptions) GetWaitUntilApiTimeoutSeconds() int32 {
	if o == nil || IsNil(o.WaitUntilApiTimeoutSeconds) {
		var ret int32
		return ret
	}
	return *o.WaitUntilApiTimeoutSeconds
}

// GetWaitUntilApiTimeoutSecondsOk returns a tuple with the WaitUntilApiTimeoutSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStateOptions) GetWaitUntilApiTimeoutSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.WaitUntilApiTimeoutSeconds) {
		return nil, false
	}
	return o.WaitUntilApiTimeoutSeconds, true
}

// HasWaitUntilApiTimeoutSeconds returns a boolean if a field has been set.
func (o *WorkflowStateOptions) HasWaitUntilApiTimeoutSeconds() bool {
	if o != nil && !IsNil(o.WaitUntilApiTimeoutSeconds) {
		return true
	}

	return false
}

// SetWaitUntilApiTimeoutSeconds gets a reference to the given int32 and assigns it to the WaitUntilApiTimeoutSeconds field.
func (o *WorkflowStateOptions) SetWaitUntilApiTimeoutSeconds(v int32) {
	o.WaitUntilApiTimeoutSeconds = &v
}

// GetExecuteApiTimeoutSeconds returns the ExecuteApiTimeoutSeconds field value if set, zero value otherwise.
func (o *WorkflowStateOptions) GetExecuteApiTimeoutSeconds() int32 {
	if o == nil || IsNil(o.ExecuteApiTimeoutSeconds) {
		var ret int32
		return ret
	}
	return *o.ExecuteApiTimeoutSeconds
}

// GetExecuteApiTimeoutSecondsOk returns a tuple with the ExecuteApiTimeoutSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStateOptions) GetExecuteApiTimeoutSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.ExecuteApiTimeoutSeconds) {
		return nil, false
	}
	return o.ExecuteApiTimeoutSeconds, true
}

// HasExecuteApiTimeoutSeconds returns a boolean if a field has been set.
func (o *WorkflowStateOptions) HasExecuteApiTimeoutSeconds() bool {
	if o != nil && !IsNil(o.ExecuteApiTimeoutSeconds) {
		return true
	}

	return false
}

// SetExecuteApiTimeoutSeconds gets a reference to the given int32 and assigns it to the ExecuteApiTimeoutSeconds field.
func (o *WorkflowStateOptions) SetExecuteApiTimeoutSeconds(v int32) {
	o.ExecuteApiTimeoutSeconds = &v
}

// GetWaitUntilApiRetryPolicy returns the WaitUntilApiRetryPolicy field value if set, zero value otherwise.
func (o *WorkflowStateOptions) GetWaitUntilApiRetryPolicy() RetryPolicy {
	if o == nil || IsNil(o.WaitUntilApiRetryPolicy) {
		var ret RetryPolicy
		return ret
	}
	return *o.WaitUntilApiRetryPolicy
}

// GetWaitUntilApiRetryPolicyOk returns a tuple with the WaitUntilApiRetryPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStateOptions) GetWaitUntilApiRetryPolicyOk() (*RetryPolicy, bool) {
	if o == nil || IsNil(o.WaitUntilApiRetryPolicy) {
		return nil, false
	}
	return o.WaitUntilApiRetryPolicy, true
}

// HasWaitUntilApiRetryPolicy returns a boolean if a field has been set.
func (o *WorkflowStateOptions) HasWaitUntilApiRetryPolicy() bool {
	if o != nil && !IsNil(o.WaitUntilApiRetryPolicy) {
		return true
	}

	return false
}

// SetWaitUntilApiRetryPolicy gets a reference to the given RetryPolicy and assigns it to the WaitUntilApiRetryPolicy field.
func (o *WorkflowStateOptions) SetWaitUntilApiRetryPolicy(v RetryPolicy) {
	o.WaitUntilApiRetryPolicy = &v
}

// GetExecuteApiRetryPolicy returns the ExecuteApiRetryPolicy field value if set, zero value otherwise.
func (o *WorkflowStateOptions) GetExecuteApiRetryPolicy() RetryPolicy {
	if o == nil || IsNil(o.ExecuteApiRetryPolicy) {
		var ret RetryPolicy
		return ret
	}
	return *o.ExecuteApiRetryPolicy
}

// GetExecuteApiRetryPolicyOk returns a tuple with the ExecuteApiRetryPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStateOptions) GetExecuteApiRetryPolicyOk() (*RetryPolicy, bool) {
	if o == nil || IsNil(o.ExecuteApiRetryPolicy) {
		return nil, false
	}
	return o.ExecuteApiRetryPolicy, true
}

// HasExecuteApiRetryPolicy returns a boolean if a field has been set.
func (o *WorkflowStateOptions) HasExecuteApiRetryPolicy() bool {
	if o != nil && !IsNil(o.ExecuteApiRetryPolicy) {
		return true
	}

	return false
}

// SetExecuteApiRetryPolicy gets a reference to the given RetryPolicy and assigns it to the ExecuteApiRetryPolicy field.
func (o *WorkflowStateOptions) SetExecuteApiRetryPolicy(v RetryPolicy) {
	o.ExecuteApiRetryPolicy = &v
}

// GetWaitUntilApiFailurePolicy returns the WaitUntilApiFailurePolicy field value if set, zero value otherwise.
func (o *WorkflowStateOptions) GetWaitUntilApiFailurePolicy() WaitUntilApiFailurePolicy {
	if o == nil || IsNil(o.WaitUntilApiFailurePolicy) {
		var ret WaitUntilApiFailurePolicy
		return ret
	}
	return *o.WaitUntilApiFailurePolicy
}

// GetWaitUntilApiFailurePolicyOk returns a tuple with the WaitUntilApiFailurePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStateOptions) GetWaitUntilApiFailurePolicyOk() (*WaitUntilApiFailurePolicy, bool) {
	if o == nil || IsNil(o.WaitUntilApiFailurePolicy) {
		return nil, false
	}
	return o.WaitUntilApiFailurePolicy, true
}

// HasWaitUntilApiFailurePolicy returns a boolean if a field has been set.
func (o *WorkflowStateOptions) HasWaitUntilApiFailurePolicy() bool {
	if o != nil && !IsNil(o.WaitUntilApiFailurePolicy) {
		return true
	}

	return false
}

// SetWaitUntilApiFailurePolicy gets a reference to the given WaitUntilApiFailurePolicy and assigns it to the WaitUntilApiFailurePolicy field.
func (o *WorkflowStateOptions) SetWaitUntilApiFailurePolicy(v WaitUntilApiFailurePolicy) {
	o.WaitUntilApiFailurePolicy = &v
}

// GetSkipWaitUntil returns the SkipWaitUntil field value if set, zero value otherwise.
func (o *WorkflowStateOptions) GetSkipWaitUntil() bool {
	if o == nil || IsNil(o.SkipWaitUntil) {
		var ret bool
		return ret
	}
	return *o.SkipWaitUntil
}

// GetSkipWaitUntilOk returns a tuple with the SkipWaitUntil field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStateOptions) GetSkipWaitUntilOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipWaitUntil) {
		return nil, false
	}
	return o.SkipWaitUntil, true
}

// HasSkipWaitUntil returns a boolean if a field has been set.
func (o *WorkflowStateOptions) HasSkipWaitUntil() bool {
	if o != nil && !IsNil(o.SkipWaitUntil) {
		return true
	}

	return false
}

// SetSkipWaitUntil gets a reference to the given bool and assigns it to the SkipWaitUntil field.
func (o *WorkflowStateOptions) SetSkipWaitUntil(v bool) {
	o.SkipWaitUntil = &v
}

// GetDataAttributesLoadingPolicy returns the DataAttributesLoadingPolicy field value if set, zero value otherwise.
func (o *WorkflowStateOptions) GetDataAttributesLoadingPolicy() PersistenceLoadingPolicy {
	if o == nil || IsNil(o.DataAttributesLoadingPolicy) {
		var ret PersistenceLoadingPolicy
		return ret
	}
	return *o.DataAttributesLoadingPolicy
}

// GetDataAttributesLoadingPolicyOk returns a tuple with the DataAttributesLoadingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStateOptions) GetDataAttributesLoadingPolicyOk() (*PersistenceLoadingPolicy, bool) {
	if o == nil || IsNil(o.DataAttributesLoadingPolicy) {
		return nil, false
	}
	return o.DataAttributesLoadingPolicy, true
}

// HasDataAttributesLoadingPolicy returns a boolean if a field has been set.
func (o *WorkflowStateOptions) HasDataAttributesLoadingPolicy() bool {
	if o != nil && !IsNil(o.DataAttributesLoadingPolicy) {
		return true
	}

	return false
}

// SetDataAttributesLoadingPolicy gets a reference to the given PersistenceLoadingPolicy and assigns it to the DataAttributesLoadingPolicy field.
func (o *WorkflowStateOptions) SetDataAttributesLoadingPolicy(v PersistenceLoadingPolicy) {
	o.DataAttributesLoadingPolicy = &v
}

func (o WorkflowStateOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkflowStateOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SearchAttributesLoadingPolicy) {
		toSerialize["searchAttributesLoadingPolicy"] = o.SearchAttributesLoadingPolicy
	}
	if !IsNil(o.DataObjectsLoadingPolicy) {
		toSerialize["dataObjectsLoadingPolicy"] = o.DataObjectsLoadingPolicy
	}
	if !IsNil(o.StartApiTimeoutSeconds) {
		toSerialize["startApiTimeoutSeconds"] = o.StartApiTimeoutSeconds
	}
	if !IsNil(o.DecideApiTimeoutSeconds) {
		toSerialize["decideApiTimeoutSeconds"] = o.DecideApiTimeoutSeconds
	}
	if !IsNil(o.StartApiRetryPolicy) {
		toSerialize["startApiRetryPolicy"] = o.StartApiRetryPolicy
	}
	if !IsNil(o.DecideApiRetryPolicy) {
		toSerialize["decideApiRetryPolicy"] = o.DecideApiRetryPolicy
	}
	if !IsNil(o.StartApiFailurePolicy) {
		toSerialize["startApiFailurePolicy"] = o.StartApiFailurePolicy
	}
	if !IsNil(o.ExecuteApiFailurePolicy) {
		toSerialize["executeApiFailurePolicy"] = o.ExecuteApiFailurePolicy
	}
	if !IsNil(o.ExecuteApiFailureProceedStateId) {
		toSerialize["executeApiFailureProceedStateId"] = o.ExecuteApiFailureProceedStateId
	}
	if !IsNil(o.ExecuteApiFailureProceedStateOptions) {
		toSerialize["executeApiFailureProceedStateOptions"] = o.ExecuteApiFailureProceedStateOptions
	}
	if !IsNil(o.SkipStartApi) {
		toSerialize["skipStartApi"] = o.SkipStartApi
	}
	if !IsNil(o.WaitUntilApiTimeoutSeconds) {
		toSerialize["waitUntilApiTimeoutSeconds"] = o.WaitUntilApiTimeoutSeconds
	}
	if !IsNil(o.ExecuteApiTimeoutSeconds) {
		toSerialize["executeApiTimeoutSeconds"] = o.ExecuteApiTimeoutSeconds
	}
	if !IsNil(o.WaitUntilApiRetryPolicy) {
		toSerialize["waitUntilApiRetryPolicy"] = o.WaitUntilApiRetryPolicy
	}
	if !IsNil(o.ExecuteApiRetryPolicy) {
		toSerialize["executeApiRetryPolicy"] = o.ExecuteApiRetryPolicy
	}
	if !IsNil(o.WaitUntilApiFailurePolicy) {
		toSerialize["waitUntilApiFailurePolicy"] = o.WaitUntilApiFailurePolicy
	}
	if !IsNil(o.SkipWaitUntil) {
		toSerialize["skipWaitUntil"] = o.SkipWaitUntil
	}
	if !IsNil(o.DataAttributesLoadingPolicy) {
		toSerialize["dataAttributesLoadingPolicy"] = o.DataAttributesLoadingPolicy
	}
	return toSerialize, nil
}

type NullableWorkflowStateOptions struct {
	value *WorkflowStateOptions
	isSet bool
}

func (v NullableWorkflowStateOptions) Get() *WorkflowStateOptions {
	return v.value
}

func (v *NullableWorkflowStateOptions) Set(val *WorkflowStateOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowStateOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowStateOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowStateOptions(val *WorkflowStateOptions) *NullableWorkflowStateOptions {
	return &NullableWorkflowStateOptions{value: val, isSet: true}
}

func (v NullableWorkflowStateOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowStateOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
