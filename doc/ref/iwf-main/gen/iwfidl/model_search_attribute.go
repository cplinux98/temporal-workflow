/*
Workflow APIs

This APIs for iwf SDKs to operate workflows

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iwfidl

import (
	"encoding/json"
)

// checks if the SearchAttribute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchAttribute{}

// SearchAttribute struct for SearchAttribute
type SearchAttribute struct {
	Key              *string                   `json:"key,omitempty"`
	StringValue      *string                   `json:"stringValue,omitempty"`
	IntegerValue     *int64                    `json:"integerValue,omitempty"`
	DoubleValue      *float64                  `json:"doubleValue,omitempty"`
	BoolValue        *bool                     `json:"boolValue,omitempty"`
	StringArrayValue []string                  `json:"stringArrayValue,omitempty"`
	ValueType        *SearchAttributeValueType `json:"valueType,omitempty"`
}

// NewSearchAttribute instantiates a new SearchAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchAttribute() *SearchAttribute {
	this := SearchAttribute{}
	return &this
}

// NewSearchAttributeWithDefaults instantiates a new SearchAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchAttributeWithDefaults() *SearchAttribute {
	this := SearchAttribute{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *SearchAttribute) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchAttribute) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *SearchAttribute) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *SearchAttribute) SetKey(v string) {
	o.Key = &v
}

// GetStringValue returns the StringValue field value if set, zero value otherwise.
func (o *SearchAttribute) GetStringValue() string {
	if o == nil || IsNil(o.StringValue) {
		var ret string
		return ret
	}
	return *o.StringValue
}

// GetStringValueOk returns a tuple with the StringValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchAttribute) GetStringValueOk() (*string, bool) {
	if o == nil || IsNil(o.StringValue) {
		return nil, false
	}
	return o.StringValue, true
}

// HasStringValue returns a boolean if a field has been set.
func (o *SearchAttribute) HasStringValue() bool {
	if o != nil && !IsNil(o.StringValue) {
		return true
	}

	return false
}

// SetStringValue gets a reference to the given string and assigns it to the StringValue field.
func (o *SearchAttribute) SetStringValue(v string) {
	o.StringValue = &v
}

// GetIntegerValue returns the IntegerValue field value if set, zero value otherwise.
func (o *SearchAttribute) GetIntegerValue() int64 {
	if o == nil || IsNil(o.IntegerValue) {
		var ret int64
		return ret
	}
	return *o.IntegerValue
}

// GetIntegerValueOk returns a tuple with the IntegerValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchAttribute) GetIntegerValueOk() (*int64, bool) {
	if o == nil || IsNil(o.IntegerValue) {
		return nil, false
	}
	return o.IntegerValue, true
}

// HasIntegerValue returns a boolean if a field has been set.
func (o *SearchAttribute) HasIntegerValue() bool {
	if o != nil && !IsNil(o.IntegerValue) {
		return true
	}

	return false
}

// SetIntegerValue gets a reference to the given int64 and assigns it to the IntegerValue field.
func (o *SearchAttribute) SetIntegerValue(v int64) {
	o.IntegerValue = &v
}

// GetDoubleValue returns the DoubleValue field value if set, zero value otherwise.
func (o *SearchAttribute) GetDoubleValue() float64 {
	if o == nil || IsNil(o.DoubleValue) {
		var ret float64
		return ret
	}
	return *o.DoubleValue
}

// GetDoubleValueOk returns a tuple with the DoubleValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchAttribute) GetDoubleValueOk() (*float64, bool) {
	if o == nil || IsNil(o.DoubleValue) {
		return nil, false
	}
	return o.DoubleValue, true
}

// HasDoubleValue returns a boolean if a field has been set.
func (o *SearchAttribute) HasDoubleValue() bool {
	if o != nil && !IsNil(o.DoubleValue) {
		return true
	}

	return false
}

// SetDoubleValue gets a reference to the given float64 and assigns it to the DoubleValue field.
func (o *SearchAttribute) SetDoubleValue(v float64) {
	o.DoubleValue = &v
}

// GetBoolValue returns the BoolValue field value if set, zero value otherwise.
func (o *SearchAttribute) GetBoolValue() bool {
	if o == nil || IsNil(o.BoolValue) {
		var ret bool
		return ret
	}
	return *o.BoolValue
}

// GetBoolValueOk returns a tuple with the BoolValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchAttribute) GetBoolValueOk() (*bool, bool) {
	if o == nil || IsNil(o.BoolValue) {
		return nil, false
	}
	return o.BoolValue, true
}

// HasBoolValue returns a boolean if a field has been set.
func (o *SearchAttribute) HasBoolValue() bool {
	if o != nil && !IsNil(o.BoolValue) {
		return true
	}

	return false
}

// SetBoolValue gets a reference to the given bool and assigns it to the BoolValue field.
func (o *SearchAttribute) SetBoolValue(v bool) {
	o.BoolValue = &v
}

// GetStringArrayValue returns the StringArrayValue field value if set, zero value otherwise.
func (o *SearchAttribute) GetStringArrayValue() []string {
	if o == nil || IsNil(o.StringArrayValue) {
		var ret []string
		return ret
	}
	return o.StringArrayValue
}

// GetStringArrayValueOk returns a tuple with the StringArrayValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchAttribute) GetStringArrayValueOk() ([]string, bool) {
	if o == nil || IsNil(o.StringArrayValue) {
		return nil, false
	}
	return o.StringArrayValue, true
}

// HasStringArrayValue returns a boolean if a field has been set.
func (o *SearchAttribute) HasStringArrayValue() bool {
	if o != nil && !IsNil(o.StringArrayValue) {
		return true
	}

	return false
}

// SetStringArrayValue gets a reference to the given []string and assigns it to the StringArrayValue field.
func (o *SearchAttribute) SetStringArrayValue(v []string) {
	o.StringArrayValue = v
}

// GetValueType returns the ValueType field value if set, zero value otherwise.
func (o *SearchAttribute) GetValueType() SearchAttributeValueType {
	if o == nil || IsNil(o.ValueType) {
		var ret SearchAttributeValueType
		return ret
	}
	return *o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchAttribute) GetValueTypeOk() (*SearchAttributeValueType, bool) {
	if o == nil || IsNil(o.ValueType) {
		return nil, false
	}
	return o.ValueType, true
}

// HasValueType returns a boolean if a field has been set.
func (o *SearchAttribute) HasValueType() bool {
	if o != nil && !IsNil(o.ValueType) {
		return true
	}

	return false
}

// SetValueType gets a reference to the given SearchAttributeValueType and assigns it to the ValueType field.
func (o *SearchAttribute) SetValueType(v SearchAttributeValueType) {
	o.ValueType = &v
}

func (o SearchAttribute) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchAttribute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.StringValue) {
		toSerialize["stringValue"] = o.StringValue
	}
	if !IsNil(o.IntegerValue) {
		toSerialize["integerValue"] = o.IntegerValue
	}
	if !IsNil(o.DoubleValue) {
		toSerialize["doubleValue"] = o.DoubleValue
	}
	if !IsNil(o.BoolValue) {
		toSerialize["boolValue"] = o.BoolValue
	}
	if !IsNil(o.StringArrayValue) {
		toSerialize["stringArrayValue"] = o.StringArrayValue
	}
	if !IsNil(o.ValueType) {
		toSerialize["valueType"] = o.ValueType
	}
	return toSerialize, nil
}

type NullableSearchAttribute struct {
	value *SearchAttribute
	isSet bool
}

func (v NullableSearchAttribute) Get() *SearchAttribute {
	return v.value
}

func (v *NullableSearchAttribute) Set(val *SearchAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchAttribute(val *SearchAttribute) *NullableSearchAttribute {
	return &NullableSearchAttribute{value: val, isSet: true}
}

func (v NullableSearchAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
