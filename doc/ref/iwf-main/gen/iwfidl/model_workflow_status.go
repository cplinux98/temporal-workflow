/*
Workflow APIs

This APIs for iwf SDKs to operate workflows

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iwfidl

import (
	"encoding/json"
	"fmt"
)

// WorkflowStatus the model 'WorkflowStatus'
type WorkflowStatus string

// List of WorkflowStatus
const (
	RUNNING          WorkflowStatus = "RUNNING"
	COMPLETED        WorkflowStatus = "COMPLETED"
	FAILED           WorkflowStatus = "FAILED"
	TIMEOUT          WorkflowStatus = "TIMEOUT"
	TERMINATED       WorkflowStatus = "TERMINATED"
	CANCELED         WorkflowStatus = "CANCELED"
	CONTINUED_AS_NEW WorkflowStatus = "CONTINUED_AS_NEW"
)

// All allowed values of WorkflowStatus enum
var AllowedWorkflowStatusEnumValues = []WorkflowStatus{
	"RUNNING",
	"COMPLETED",
	"FAILED",
	"TIMEOUT",
	"TERMINATED",
	"CANCELED",
	"CONTINUED_AS_NEW",
}

func (v *WorkflowStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WorkflowStatus(value)
	for _, existing := range AllowedWorkflowStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WorkflowStatus", value)
}

// NewWorkflowStatusFromValue returns a pointer to a valid WorkflowStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkflowStatusFromValue(v string) (*WorkflowStatus, error) {
	ev := WorkflowStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WorkflowStatus: valid values are %v", v, AllowedWorkflowStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WorkflowStatus) IsValid() bool {
	for _, existing := range AllowedWorkflowStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WorkflowStatus value
func (v WorkflowStatus) Ptr() *WorkflowStatus {
	return &v
}

type NullableWorkflowStatus struct {
	value *WorkflowStatus
	isSet bool
}

func (v NullableWorkflowStatus) Get() *WorkflowStatus {
	return v.value
}

func (v *NullableWorkflowStatus) Set(val *WorkflowStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowStatus(val *WorkflowStatus) *NullableWorkflowStatus {
	return &NullableWorkflowStatus{value: val, isSet: true}
}

func (v NullableWorkflowStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
